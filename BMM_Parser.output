State 20 conflicts: 1 shift/reduce
State 34 conflicts: 1 shift/reduce
State 41 conflicts: 1 shift/reduce
State 50 conflicts: 1 shift/reduce
State 64 conflicts: 1 shift/reduce
State 65 conflicts: 1 shift/reduce
State 67 conflicts: 1 shift/reduce
State 68 conflicts: 1 shift/reduce
State 69 conflicts: 1 shift/reduce
State 70 conflicts: 1 shift/reduce
State 71 conflicts: 1 shift/reduce
State 72 conflicts: 1 shift/reduce
State 73 conflicts: 1 shift/reduce
State 74 conflicts: 1 shift/reduce
State 75 conflicts: 1 shift/reduce
State 76 conflicts: 1 shift/reduce
State 77 conflicts: 1 shift/reduce
State 78 conflicts: 1 shift/reduce
State 79 conflicts: 1 shift/reduce
State 80 conflicts: 1 shift/reduce
State 81 conflicts: 1 shift/reduce
State 82 conflicts: 1 shift/reduce
State 83 conflicts: 1 shift/reduce
State 90 conflicts: 1 shift/reduce
State 93 conflicts: 1 shift/reduce
State 94 conflicts: 1 shift/reduce
State 128 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 137 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmt program
    2        | stmt

    3 stmt: variable_def
    4     | print
    5     | comment
    6     | assignment
    7     | stop
    8     | return
    9     | goto
   10     | gosub
   11     | dim
   12     | end
   13     | input
   14     | def_fn
   15     | if
   16     | for
   17     | data
   18     | error

   19 expr: NUMBER
   20     | VARIABLE_NAME
   21     | arithmetic_expr
   22     | relation_expr
   23     | logical_expr
   24     | OPEN_BRACKET expr CLOSE_BRACKET

   25 relation_expr: expr LESS expr
   26              | expr BIGGER expr
   27              | expr LESSEQ expr
   28              | expr BIGEQ expr
   29              | expr EQUALS expr
   30              | expr NOTEQUALS expr

   31 logical_expr: expr AND expr
   32             | expr OR expr
   33             | NOT expr
   34             | expr XOR expr

   35 arithmetic_expr: /* empty */
   36                | expr PLUS expr
   37                | expr MINUS expr
   38                | expr MULTIPLY expr
   39                | expr DIVIDE expr
   40                | expr POWER expr

   41 data: NUMBER DATA value

   42 value: expr COMMA value
   43      | STRING1 COMMA value
   44      | expr
   45      | STRING1

   46 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr next
   47    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt next
   48    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt stmt next
   49    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt next
   50    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt next
   51    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt stmt next

   52 next: NUMBER NEXT VARIABLE_NAME

   53 if: NUMBER IF relation_expr THEN NUMBER

   54 def_fn: NUMBER DEF_FN VARIABLE_NAME OPEN_BRACKET VARIABLE_NAME CLOSE_BRACKET EQUALS expr
   55       | NUMBER DEF_FN VARIABLE_NAME EQUALS expr

   56 input: NUMBER INPUT VAR

   57 VAR: VARIABLE_NAME
   58    | VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET
   59    | VARIABLE_NAME COMMA VAR
   60    | VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET COMMA VAR

   61 end: NUMBER END

   62 dim: NUMBER DIM VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET
   63    | NUMBER DIM VARIABLE_NAME OPEN_BRACKET NUMBER COMMA NUMBER CLOSE_BRACKET

   64 goto: NUMBER GOTO NUMBER

   65 gosub: NUMBER GOSUB NUMBER

   66 return: NUMBER RETURN

   67 stop: NUMBER STOP

   68 variable_def: NUMBER LET VARIABLE_NAME EQUALS expr

   69 assignment: NUMBER VARIABLE_NAME EQUALS expr

   70 print: NUMBER PRINT print_expr

   71 print_expr: expr
   72           | STRING1
   73           | STRING1 COMMA print_expr
   74           | STRING1 SEMICOLON print_expr
   75           | expr COMMA print_expr
   76           | expr SEMICOLON print_expr

   77 comment: NUMBER REM str1

   78 str1: STRING
   79     | STRING str1


Terminals, with rules where they appear

$end (0) 0
error (256) 18
PRINT (258) 70
LET (259) 68
REM (260) 77
EQUALS (261) 29 46 47 48 49 50 51 54 55 68 69
VARIABLE_NAME (262) 20 46 47 48 49 50 51 52 54 55 57 58 59 60 62 63
    68 69
NUMBER (263) 19 41 46 47 48 49 50 51 52 53 54 55 56 58 60 61 62 63
    64 65 66 67 68 69 70 77
STRING (264) 78 79
PLUS (265) 36
MINUS (266) 37
DIVIDE (267) 39
MULTIPLY (268) 38
OPEN_BRACKET (269) 24 54 58 60 62 63
CLOSE_BRACKET (270) 24 54 58 60 62 63
LESS (271) 25
BIGGER (272) 26
LESSEQ (273) 27
BIGEQ (274) 28
IF (275) 53
THEN (276) 53
AND (277) 31
OR (278) 32
SEMICOLON (279) 74 76
COMMA (280) 42 43 59 60 63 73 75
STOP (281) 67
RETURN (282) 66
STRING1 (283) 43 45 72 73 74
GOTO (284) 64
GOSUB (285) 65
DIM (286) 62 63
END (287) 61
INPUT (288) 56
DEF_FN (289) 54 55
NOTEQUALS (290) 30
FOR (291) 46 47 48 49 50 51
NEXT (292) 52
STEP (293) 49 50 51
TO (294) 46 47 48 49 50 51
DATA (295) 41
NOT (296) 33
XOR (297) 34
POWER (298) 40


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
program (45)
    on left: 1 2, on right: 0 1
stmt (46)
    on left: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18, on right: 1
    2 47 48 49 50 51
expr (47)
    on left: 19 20 21 22 23 24, on right: 24 25 26 27 28 29 30 31 32
    33 34 36 37 38 39 40 42 44 46 47 48 49 50 51 54 55 68 69 71 75
    76
relation_expr (48)
    on left: 25 26 27 28 29 30, on right: 22 53
logical_expr (49)
    on left: 31 32 33 34, on right: 23
arithmetic_expr (50)
    on left: 35 36 37 38 39 40, on right: 21
data (51)
    on left: 41, on right: 17
value (52)
    on left: 42 43 44 45, on right: 41 42 43
for (53)
    on left: 46 47 48 49 50 51, on right: 16
next (54)
    on left: 52, on right: 46 47 48 49 50 51
if (55)
    on left: 53, on right: 15
def_fn (56)
    on left: 54 55, on right: 14
input (57)
    on left: 56, on right: 13
VAR (58)
    on left: 57 58 59 60, on right: 56 59 60
end (59)
    on left: 61, on right: 12
dim (60)
    on left: 62 63, on right: 11
goto (61)
    on left: 64, on right: 9
gosub (62)
    on left: 65, on right: 10
return (63)
    on left: 66, on right: 8
stop (64)
    on left: 67, on right: 7
variable_def (65)
    on left: 68, on right: 3
assignment (66)
    on left: 69, on right: 6
print (67)
    on left: 70, on right: 4
print_expr (68)
    on left: 71 72 73 74 75 76, on right: 70 73 74 75 76
comment (69)
    on left: 77, on right: 5
str1 (70)
    on left: 78 79, on right: 77 79


state 0

    0 $accept: . program $end

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2

    program       go to state 3
    stmt          go to state 4
    data          go to state 5
    for           go to state 6
    if            go to state 7
    def_fn        go to state 8
    input         go to state 9
    end           go to state 10
    dim           go to state 11
    goto          go to state 12
    gosub         go to state 13
    return        go to state 14
    stop          go to state 15
    variable_def  go to state 16
    assignment    go to state 17
    print         go to state 18
    comment       go to state 19


state 1

   18 stmt: error .

    $default  reduce using rule 18 (stmt)


state 2

   41 data: NUMBER . DATA value
   46 for: NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr next
   47    | NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt next
   48    | NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt stmt next
   49    | NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt next
   50    | NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt next
   51    | NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt stmt next
   53 if: NUMBER . IF relation_expr THEN NUMBER
   54 def_fn: NUMBER . DEF_FN VARIABLE_NAME OPEN_BRACKET VARIABLE_NAME CLOSE_BRACKET EQUALS expr
   55       | NUMBER . DEF_FN VARIABLE_NAME EQUALS expr
   56 input: NUMBER . INPUT VAR
   61 end: NUMBER . END
   62 dim: NUMBER . DIM VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET
   63    | NUMBER . DIM VARIABLE_NAME OPEN_BRACKET NUMBER COMMA NUMBER CLOSE_BRACKET
   64 goto: NUMBER . GOTO NUMBER
   65 gosub: NUMBER . GOSUB NUMBER
   66 return: NUMBER . RETURN
   67 stop: NUMBER . STOP
   68 variable_def: NUMBER . LET VARIABLE_NAME EQUALS expr
   69 assignment: NUMBER . VARIABLE_NAME EQUALS expr
   70 print: NUMBER . PRINT print_expr
   77 comment: NUMBER . REM str1

    PRINT          shift, and go to state 20
    LET            shift, and go to state 21
    REM            shift, and go to state 22
    VARIABLE_NAME  shift, and go to state 23
    IF             shift, and go to state 24
    STOP           shift, and go to state 25
    RETURN         shift, and go to state 26
    GOTO           shift, and go to state 27
    GOSUB          shift, and go to state 28
    DIM            shift, and go to state 29
    END            shift, and go to state 30
    INPUT          shift, and go to state 31
    DEF_FN         shift, and go to state 32
    FOR            shift, and go to state 33
    DATA           shift, and go to state 34


state 3

    0 $accept: program . $end

    $end  shift, and go to state 35


state 4

    1 program: stmt . program
    2        | stmt .

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2

    $end  reduce using rule 2 (program)

    program       go to state 36
    stmt          go to state 4
    data          go to state 5
    for           go to state 6
    if            go to state 7
    def_fn        go to state 8
    input         go to state 9
    end           go to state 10
    dim           go to state 11
    goto          go to state 12
    gosub         go to state 13
    return        go to state 14
    stop          go to state 15
    variable_def  go to state 16
    assignment    go to state 17
    print         go to state 18
    comment       go to state 19


state 5

   17 stmt: data .

    $default  reduce using rule 17 (stmt)


state 6

   16 stmt: for .

    $default  reduce using rule 16 (stmt)


state 7

   15 stmt: if .

    $default  reduce using rule 15 (stmt)


state 8

   14 stmt: def_fn .

    $default  reduce using rule 14 (stmt)


state 9

   13 stmt: input .

    $default  reduce using rule 13 (stmt)


state 10

   12 stmt: end .

    $default  reduce using rule 12 (stmt)


state 11

   11 stmt: dim .

    $default  reduce using rule 11 (stmt)


state 12

    9 stmt: goto .

    $default  reduce using rule 9 (stmt)


state 13

   10 stmt: gosub .

    $default  reduce using rule 10 (stmt)


state 14

    8 stmt: return .

    $default  reduce using rule 8 (stmt)


state 15

    7 stmt: stop .

    $default  reduce using rule 7 (stmt)


state 16

    3 stmt: variable_def .

    $default  reduce using rule 3 (stmt)


state 17

    6 stmt: assignment .

    $default  reduce using rule 6 (stmt)


state 18

    4 stmt: print .

    $default  reduce using rule 4 (stmt)


state 19

    5 stmt: comment .

    $default  reduce using rule 5 (stmt)


state 20

   70 print: NUMBER PRINT . print_expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    STRING1        shift, and go to state 40
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 42
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45
    print_expr       go to state 46


state 21

   68 variable_def: NUMBER LET . VARIABLE_NAME EQUALS expr

    VARIABLE_NAME  shift, and go to state 47


state 22

   77 comment: NUMBER REM . str1

    STRING  shift, and go to state 48

    str1  go to state 49


state 23

   69 assignment: NUMBER VARIABLE_NAME . EQUALS expr

    EQUALS  shift, and go to state 50


state 24

   53 if: NUMBER IF . relation_expr THEN NUMBER

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 51
    relation_expr    go to state 52
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 25

   67 stop: NUMBER STOP .

    $default  reduce using rule 67 (stop)


state 26

   66 return: NUMBER RETURN .

    $default  reduce using rule 66 (return)


state 27

   64 goto: NUMBER GOTO . NUMBER

    NUMBER  shift, and go to state 53


state 28

   65 gosub: NUMBER GOSUB . NUMBER

    NUMBER  shift, and go to state 54


state 29

   62 dim: NUMBER DIM . VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET
   63    | NUMBER DIM . VARIABLE_NAME OPEN_BRACKET NUMBER COMMA NUMBER CLOSE_BRACKET

    VARIABLE_NAME  shift, and go to state 55


state 30

   61 end: NUMBER END .

    $default  reduce using rule 61 (end)


state 31

   56 input: NUMBER INPUT . VAR

    VARIABLE_NAME  shift, and go to state 56

    VAR  go to state 57


state 32

   54 def_fn: NUMBER DEF_FN . VARIABLE_NAME OPEN_BRACKET VARIABLE_NAME CLOSE_BRACKET EQUALS expr
   55       | NUMBER DEF_FN . VARIABLE_NAME EQUALS expr

    VARIABLE_NAME  shift, and go to state 58


state 33

   46 for: NUMBER FOR . VARIABLE_NAME EQUALS expr TO expr next
   47    | NUMBER FOR . VARIABLE_NAME EQUALS expr TO expr stmt stmt next
   48    | NUMBER FOR . VARIABLE_NAME EQUALS expr TO expr stmt stmt stmt next
   49    | NUMBER FOR . VARIABLE_NAME EQUALS expr TO expr STEP expr stmt next
   50    | NUMBER FOR . VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt next
   51    | NUMBER FOR . VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt stmt next

    VARIABLE_NAME  shift, and go to state 59


state 34

   41 data: NUMBER DATA . value

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    STRING1        shift, and go to state 60
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 61
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45
    value            go to state 62


state 35

    0 $accept: program $end .

    $default  accept


state 36

    1 program: stmt program .

    $default  reduce using rule 1 (program)


state 37

   20 expr: VARIABLE_NAME .

    $default  reduce using rule 20 (expr)


state 38

   19 expr: NUMBER .

    $default  reduce using rule 19 (expr)


state 39

   24 expr: OPEN_BRACKET . expr CLOSE_BRACKET

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 63
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 40

   72 print_expr: STRING1 .
   73           | STRING1 . COMMA print_expr
   74           | STRING1 . SEMICOLON print_expr

    SEMICOLON  shift, and go to state 64
    COMMA      shift, and go to state 65

    $default  reduce using rule 72 (print_expr)


state 41

   33 logical_expr: NOT . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 66
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 42

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr
   71 print_expr: expr .
   75           | expr . COMMA print_expr
   76           | expr . SEMICOLON print_expr

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    AND        shift, and go to state 76
    OR         shift, and go to state 77
    SEMICOLON  shift, and go to state 78
    COMMA      shift, and go to state 79
    NOTEQUALS  shift, and go to state 80
    XOR        shift, and go to state 81
    POWER      shift, and go to state 82

    $default  reduce using rule 71 (print_expr)


state 43

   22 expr: relation_expr .

    $default  reduce using rule 22 (expr)


state 44

   23 expr: logical_expr .

    $default  reduce using rule 23 (expr)


state 45

   21 expr: arithmetic_expr .

    $default  reduce using rule 21 (expr)


state 46

   70 print: NUMBER PRINT print_expr .

    $default  reduce using rule 70 (print)


state 47

   68 variable_def: NUMBER LET VARIABLE_NAME . EQUALS expr

    EQUALS  shift, and go to state 83


state 48

   78 str1: STRING .
   79     | STRING . str1

    STRING  shift, and go to state 48

    $default  reduce using rule 78 (str1)

    str1  go to state 84


state 49

   77 comment: NUMBER REM str1 .

    $default  reduce using rule 77 (comment)


state 50

   69 assignment: NUMBER VARIABLE_NAME EQUALS . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 85
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 51

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    AND        shift, and go to state 76
    OR         shift, and go to state 77
    NOTEQUALS  shift, and go to state 80
    XOR        shift, and go to state 81
    POWER      shift, and go to state 82


state 52

   22 expr: relation_expr .
   53 if: NUMBER IF relation_expr . THEN NUMBER

    THEN  shift, and go to state 86

    $default  reduce using rule 22 (expr)


state 53

   64 goto: NUMBER GOTO NUMBER .

    $default  reduce using rule 64 (goto)


state 54

   65 gosub: NUMBER GOSUB NUMBER .

    $default  reduce using rule 65 (gosub)


state 55

   62 dim: NUMBER DIM VARIABLE_NAME . OPEN_BRACKET NUMBER CLOSE_BRACKET
   63    | NUMBER DIM VARIABLE_NAME . OPEN_BRACKET NUMBER COMMA NUMBER CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 87


state 56

   57 VAR: VARIABLE_NAME .
   58    | VARIABLE_NAME . OPEN_BRACKET NUMBER CLOSE_BRACKET
   59    | VARIABLE_NAME . COMMA VAR
   60    | VARIABLE_NAME . OPEN_BRACKET NUMBER CLOSE_BRACKET COMMA VAR

    OPEN_BRACKET  shift, and go to state 88
    COMMA         shift, and go to state 89

    $default  reduce using rule 57 (VAR)


state 57

   56 input: NUMBER INPUT VAR .

    $default  reduce using rule 56 (input)


state 58

   54 def_fn: NUMBER DEF_FN VARIABLE_NAME . OPEN_BRACKET VARIABLE_NAME CLOSE_BRACKET EQUALS expr
   55       | NUMBER DEF_FN VARIABLE_NAME . EQUALS expr

    EQUALS        shift, and go to state 90
    OPEN_BRACKET  shift, and go to state 91


state 59

   46 for: NUMBER FOR VARIABLE_NAME . EQUALS expr TO expr next
   47    | NUMBER FOR VARIABLE_NAME . EQUALS expr TO expr stmt stmt next
   48    | NUMBER FOR VARIABLE_NAME . EQUALS expr TO expr stmt stmt stmt next
   49    | NUMBER FOR VARIABLE_NAME . EQUALS expr TO expr STEP expr stmt next
   50    | NUMBER FOR VARIABLE_NAME . EQUALS expr TO expr STEP expr stmt stmt next
   51    | NUMBER FOR VARIABLE_NAME . EQUALS expr TO expr STEP expr stmt stmt stmt next

    EQUALS  shift, and go to state 92


state 60

   43 value: STRING1 . COMMA value
   45      | STRING1 .

    COMMA  shift, and go to state 93

    $default  reduce using rule 45 (value)


state 61

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr
   42 value: expr . COMMA value
   44      | expr .

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    AND        shift, and go to state 76
    OR         shift, and go to state 77
    COMMA      shift, and go to state 94
    NOTEQUALS  shift, and go to state 80
    XOR        shift, and go to state 81
    POWER      shift, and go to state 82

    $default  reduce using rule 44 (value)


state 62

   41 data: NUMBER DATA value .

    $default  reduce using rule 41 (data)


state 63

   24 expr: OPEN_BRACKET expr . CLOSE_BRACKET
   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    EQUALS         shift, and go to state 67
    PLUS           shift, and go to state 68
    MINUS          shift, and go to state 69
    DIVIDE         shift, and go to state 70
    MULTIPLY       shift, and go to state 71
    CLOSE_BRACKET  shift, and go to state 95
    LESS           shift, and go to state 72
    BIGGER         shift, and go to state 73
    LESSEQ         shift, and go to state 74
    BIGEQ          shift, and go to state 75
    AND            shift, and go to state 76
    OR             shift, and go to state 77
    NOTEQUALS      shift, and go to state 80
    XOR            shift, and go to state 81
    POWER          shift, and go to state 82


state 64

   74 print_expr: STRING1 SEMICOLON . print_expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    STRING1        shift, and go to state 40
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 42
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45
    print_expr       go to state 96


state 65

   73 print_expr: STRING1 COMMA . print_expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    STRING1        shift, and go to state 40
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 42
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45
    print_expr       go to state 97


state 66

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   33             | NOT expr .
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    NOTEQUALS  shift, and go to state 80
    POWER      shift, and go to state 82

    $default  reduce using rule 33 (logical_expr)


state 67

   29 relation_expr: expr EQUALS . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 98
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 68

   36 arithmetic_expr: expr PLUS . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 99
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 69

   37 arithmetic_expr: expr MINUS . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 100
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 70

   39 arithmetic_expr: expr DIVIDE . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 101
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 71

   38 arithmetic_expr: expr MULTIPLY . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 102
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 72

   25 relation_expr: expr LESS . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 103
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 73

   26 relation_expr: expr BIGGER . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 104
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 74

   27 relation_expr: expr LESSEQ . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 105
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 75

   28 relation_expr: expr BIGEQ . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 106
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 76

   31 logical_expr: expr AND . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 107
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 77

   32 logical_expr: expr OR . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 108
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 78

   76 print_expr: expr SEMICOLON . print_expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    STRING1        shift, and go to state 40
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 42
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45
    print_expr       go to state 109


state 79

   75 print_expr: expr COMMA . print_expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    STRING1        shift, and go to state 40
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 42
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45
    print_expr       go to state 110


state 80

   30 relation_expr: expr NOTEQUALS . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 111
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 81

   34 logical_expr: expr XOR . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 112
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 82

   40 arithmetic_expr: expr POWER . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 113
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 83

   68 variable_def: NUMBER LET VARIABLE_NAME EQUALS . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 114
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 84

   79 str1: STRING str1 .

    $default  reduce using rule 79 (str1)


state 85

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr
   69 assignment: NUMBER VARIABLE_NAME EQUALS expr .

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    AND        shift, and go to state 76
    OR         shift, and go to state 77
    NOTEQUALS  shift, and go to state 80
    XOR        shift, and go to state 81
    POWER      shift, and go to state 82

    $default  reduce using rule 69 (assignment)


state 86

   53 if: NUMBER IF relation_expr THEN . NUMBER

    NUMBER  shift, and go to state 115


state 87

   62 dim: NUMBER DIM VARIABLE_NAME OPEN_BRACKET . NUMBER CLOSE_BRACKET
   63    | NUMBER DIM VARIABLE_NAME OPEN_BRACKET . NUMBER COMMA NUMBER CLOSE_BRACKET

    NUMBER  shift, and go to state 116


state 88

   58 VAR: VARIABLE_NAME OPEN_BRACKET . NUMBER CLOSE_BRACKET
   60    | VARIABLE_NAME OPEN_BRACKET . NUMBER CLOSE_BRACKET COMMA VAR

    NUMBER  shift, and go to state 117


state 89

   59 VAR: VARIABLE_NAME COMMA . VAR

    VARIABLE_NAME  shift, and go to state 56

    VAR  go to state 118


state 90

   55 def_fn: NUMBER DEF_FN VARIABLE_NAME EQUALS . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 119
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 91

   54 def_fn: NUMBER DEF_FN VARIABLE_NAME OPEN_BRACKET . VARIABLE_NAME CLOSE_BRACKET EQUALS expr

    VARIABLE_NAME  shift, and go to state 120


state 92

   46 for: NUMBER FOR VARIABLE_NAME EQUALS . expr TO expr next
   47    | NUMBER FOR VARIABLE_NAME EQUALS . expr TO expr stmt stmt next
   48    | NUMBER FOR VARIABLE_NAME EQUALS . expr TO expr stmt stmt stmt next
   49    | NUMBER FOR VARIABLE_NAME EQUALS . expr TO expr STEP expr stmt next
   50    | NUMBER FOR VARIABLE_NAME EQUALS . expr TO expr STEP expr stmt stmt next
   51    | NUMBER FOR VARIABLE_NAME EQUALS . expr TO expr STEP expr stmt stmt stmt next

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 121
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 93

   43 value: STRING1 COMMA . value

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    STRING1        shift, and go to state 60
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 61
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45
    value            go to state 122


state 94

   42 value: expr COMMA . value

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    STRING1        shift, and go to state 60
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 61
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45
    value            go to state 123


state 95

   24 expr: OPEN_BRACKET expr CLOSE_BRACKET .

    $default  reduce using rule 24 (expr)


state 96

   74 print_expr: STRING1 SEMICOLON print_expr .

    $default  reduce using rule 74 (print_expr)


state 97

   73 print_expr: STRING1 COMMA print_expr .

    $default  reduce using rule 73 (print_expr)


state 98

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   29              | expr EQUALS expr .
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    PLUS      shift, and go to state 68
    MINUS     shift, and go to state 69
    DIVIDE    shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    POWER     shift, and go to state 82

    $default  reduce using rule 29 (relation_expr)


state 99

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   36                | expr PLUS expr .
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    DIVIDE    shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    POWER     shift, and go to state 82

    $default  reduce using rule 36 (arithmetic_expr)


state 100

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   37                | expr MINUS expr .
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    DIVIDE    shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    POWER     shift, and go to state 82

    $default  reduce using rule 37 (arithmetic_expr)


state 101

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   39                | expr DIVIDE expr .
   40                | expr . POWER expr

    POWER  shift, and go to state 82

    $default  reduce using rule 39 (arithmetic_expr)


state 102

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   38                | expr MULTIPLY expr .
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    POWER  shift, and go to state 82

    $default  reduce using rule 38 (arithmetic_expr)


state 103

   25 relation_expr: expr . LESS expr
   25              | expr LESS expr .
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    PLUS      shift, and go to state 68
    MINUS     shift, and go to state 69
    DIVIDE    shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    POWER     shift, and go to state 82

    $default  reduce using rule 25 (relation_expr)


state 104

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   26              | expr BIGGER expr .
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    PLUS      shift, and go to state 68
    MINUS     shift, and go to state 69
    DIVIDE    shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    POWER     shift, and go to state 82

    $default  reduce using rule 26 (relation_expr)


state 105

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   27              | expr LESSEQ expr .
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    PLUS      shift, and go to state 68
    MINUS     shift, and go to state 69
    DIVIDE    shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    POWER     shift, and go to state 82

    $default  reduce using rule 27 (relation_expr)


state 106

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   28              | expr BIGEQ expr .
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    PLUS      shift, and go to state 68
    MINUS     shift, and go to state 69
    DIVIDE    shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    POWER     shift, and go to state 82

    $default  reduce using rule 28 (relation_expr)


state 107

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   31             | expr AND expr .
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    NOTEQUALS  shift, and go to state 80
    POWER      shift, and go to state 82

    $default  reduce using rule 31 (logical_expr)


state 108

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   32             | expr OR expr .
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    NOTEQUALS  shift, and go to state 80
    POWER      shift, and go to state 82

    $default  reduce using rule 32 (logical_expr)


state 109

   76 print_expr: expr SEMICOLON print_expr .

    $default  reduce using rule 76 (print_expr)


state 110

   75 print_expr: expr COMMA print_expr .

    $default  reduce using rule 75 (print_expr)


state 111

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   30              | expr NOTEQUALS expr .
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    PLUS      shift, and go to state 68
    MINUS     shift, and go to state 69
    DIVIDE    shift, and go to state 70
    MULTIPLY  shift, and go to state 71
    POWER     shift, and go to state 82

    $default  reduce using rule 30 (relation_expr)


state 112

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   34             | expr XOR expr .
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    NOTEQUALS  shift, and go to state 80
    POWER      shift, and go to state 82

    $default  reduce using rule 34 (logical_expr)


state 113

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr
   40                | expr POWER expr .

    $default  reduce using rule 40 (arithmetic_expr)


state 114

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr
   68 variable_def: NUMBER LET VARIABLE_NAME EQUALS expr .

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    AND        shift, and go to state 76
    OR         shift, and go to state 77
    NOTEQUALS  shift, and go to state 80
    XOR        shift, and go to state 81
    POWER      shift, and go to state 82

    $default  reduce using rule 68 (variable_def)


state 115

   53 if: NUMBER IF relation_expr THEN NUMBER .

    $default  reduce using rule 53 (if)


state 116

   62 dim: NUMBER DIM VARIABLE_NAME OPEN_BRACKET NUMBER . CLOSE_BRACKET
   63    | NUMBER DIM VARIABLE_NAME OPEN_BRACKET NUMBER . COMMA NUMBER CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 124
    COMMA          shift, and go to state 125


state 117

   58 VAR: VARIABLE_NAME OPEN_BRACKET NUMBER . CLOSE_BRACKET
   60    | VARIABLE_NAME OPEN_BRACKET NUMBER . CLOSE_BRACKET COMMA VAR

    CLOSE_BRACKET  shift, and go to state 126


state 118

   59 VAR: VARIABLE_NAME COMMA VAR .

    $default  reduce using rule 59 (VAR)


state 119

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr
   55 def_fn: NUMBER DEF_FN VARIABLE_NAME EQUALS expr .

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    AND        shift, and go to state 76
    OR         shift, and go to state 77
    NOTEQUALS  shift, and go to state 80
    XOR        shift, and go to state 81
    POWER      shift, and go to state 82

    $default  reduce using rule 55 (def_fn)


state 120

   54 def_fn: NUMBER DEF_FN VARIABLE_NAME OPEN_BRACKET VARIABLE_NAME . CLOSE_BRACKET EQUALS expr

    CLOSE_BRACKET  shift, and go to state 127


state 121

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr
   46 for: NUMBER FOR VARIABLE_NAME EQUALS expr . TO expr next
   47    | NUMBER FOR VARIABLE_NAME EQUALS expr . TO expr stmt stmt next
   48    | NUMBER FOR VARIABLE_NAME EQUALS expr . TO expr stmt stmt stmt next
   49    | NUMBER FOR VARIABLE_NAME EQUALS expr . TO expr STEP expr stmt next
   50    | NUMBER FOR VARIABLE_NAME EQUALS expr . TO expr STEP expr stmt stmt next
   51    | NUMBER FOR VARIABLE_NAME EQUALS expr . TO expr STEP expr stmt stmt stmt next

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    AND        shift, and go to state 76
    OR         shift, and go to state 77
    NOTEQUALS  shift, and go to state 80
    TO         shift, and go to state 128
    XOR        shift, and go to state 81
    POWER      shift, and go to state 82


state 122

   43 value: STRING1 COMMA value .

    $default  reduce using rule 43 (value)


state 123

   42 value: expr COMMA value .

    $default  reduce using rule 42 (value)


state 124

   62 dim: NUMBER DIM VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET .

    $default  reduce using rule 62 (dim)


state 125

   63 dim: NUMBER DIM VARIABLE_NAME OPEN_BRACKET NUMBER COMMA . NUMBER CLOSE_BRACKET

    NUMBER  shift, and go to state 129


state 126

   58 VAR: VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET .
   60    | VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET . COMMA VAR

    COMMA  shift, and go to state 130

    $default  reduce using rule 58 (VAR)


state 127

   54 def_fn: NUMBER DEF_FN VARIABLE_NAME OPEN_BRACKET VARIABLE_NAME CLOSE_BRACKET . EQUALS expr

    EQUALS  shift, and go to state 131


state 128

   46 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO . expr next
   47    | NUMBER FOR VARIABLE_NAME EQUALS expr TO . expr stmt stmt next
   48    | NUMBER FOR VARIABLE_NAME EQUALS expr TO . expr stmt stmt stmt next
   49    | NUMBER FOR VARIABLE_NAME EQUALS expr TO . expr STEP expr stmt next
   50    | NUMBER FOR VARIABLE_NAME EQUALS expr TO . expr STEP expr stmt stmt next
   51    | NUMBER FOR VARIABLE_NAME EQUALS expr TO . expr STEP expr stmt stmt stmt next

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 132
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 129

   63 dim: NUMBER DIM VARIABLE_NAME OPEN_BRACKET NUMBER COMMA NUMBER . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 133


state 130

   60 VAR: VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET COMMA . VAR

    VARIABLE_NAME  shift, and go to state 56

    VAR  go to state 134


state 131

   54 def_fn: NUMBER DEF_FN VARIABLE_NAME OPEN_BRACKET VARIABLE_NAME CLOSE_BRACKET EQUALS . expr

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 135
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 132

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr
   46 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr . next
   47    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr . stmt stmt next
   48    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr . stmt stmt stmt next
   49    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr . STEP expr stmt next
   50    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr . STEP expr stmt stmt next
   51    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr . STEP expr stmt stmt stmt next

    error      shift, and go to state 1
    EQUALS     shift, and go to state 67
    NUMBER     shift, and go to state 136
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    AND        shift, and go to state 76
    OR         shift, and go to state 77
    NOTEQUALS  shift, and go to state 80
    STEP       shift, and go to state 137
    XOR        shift, and go to state 81
    POWER      shift, and go to state 82

    stmt          go to state 138
    data          go to state 5
    for           go to state 6
    next          go to state 139
    if            go to state 7
    def_fn        go to state 8
    input         go to state 9
    end           go to state 10
    dim           go to state 11
    goto          go to state 12
    gosub         go to state 13
    return        go to state 14
    stop          go to state 15
    variable_def  go to state 16
    assignment    go to state 17
    print         go to state 18
    comment       go to state 19


state 133

   63 dim: NUMBER DIM VARIABLE_NAME OPEN_BRACKET NUMBER COMMA NUMBER CLOSE_BRACKET .

    $default  reduce using rule 63 (dim)


state 134

   60 VAR: VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET COMMA VAR .

    $default  reduce using rule 60 (VAR)


state 135

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr
   54 def_fn: NUMBER DEF_FN VARIABLE_NAME OPEN_BRACKET VARIABLE_NAME CLOSE_BRACKET EQUALS expr .

    EQUALS     shift, and go to state 67
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    AND        shift, and go to state 76
    OR         shift, and go to state 77
    NOTEQUALS  shift, and go to state 80
    XOR        shift, and go to state 81
    POWER      shift, and go to state 82

    $default  reduce using rule 54 (def_fn)


state 136

   41 data: NUMBER . DATA value
   46 for: NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr next
   47    | NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt next
   48    | NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt stmt next
   49    | NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt next
   50    | NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt next
   51    | NUMBER . FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt stmt next
   52 next: NUMBER . NEXT VARIABLE_NAME
   53 if: NUMBER . IF relation_expr THEN NUMBER
   54 def_fn: NUMBER . DEF_FN VARIABLE_NAME OPEN_BRACKET VARIABLE_NAME CLOSE_BRACKET EQUALS expr
   55       | NUMBER . DEF_FN VARIABLE_NAME EQUALS expr
   56 input: NUMBER . INPUT VAR
   61 end: NUMBER . END
   62 dim: NUMBER . DIM VARIABLE_NAME OPEN_BRACKET NUMBER CLOSE_BRACKET
   63    | NUMBER . DIM VARIABLE_NAME OPEN_BRACKET NUMBER COMMA NUMBER CLOSE_BRACKET
   64 goto: NUMBER . GOTO NUMBER
   65 gosub: NUMBER . GOSUB NUMBER
   66 return: NUMBER . RETURN
   67 stop: NUMBER . STOP
   68 variable_def: NUMBER . LET VARIABLE_NAME EQUALS expr
   69 assignment: NUMBER . VARIABLE_NAME EQUALS expr
   70 print: NUMBER . PRINT print_expr
   77 comment: NUMBER . REM str1

    PRINT          shift, and go to state 20
    LET            shift, and go to state 21
    REM            shift, and go to state 22
    VARIABLE_NAME  shift, and go to state 23
    IF             shift, and go to state 24
    STOP           shift, and go to state 25
    RETURN         shift, and go to state 26
    GOTO           shift, and go to state 27
    GOSUB          shift, and go to state 28
    DIM            shift, and go to state 29
    END            shift, and go to state 30
    INPUT          shift, and go to state 31
    DEF_FN         shift, and go to state 32
    FOR            shift, and go to state 33
    NEXT           shift, and go to state 140
    DATA           shift, and go to state 34


state 137

   49 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP . expr stmt next
   50    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP . expr stmt stmt next
   51    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP . expr stmt stmt stmt next

    VARIABLE_NAME  shift, and go to state 37
    NUMBER         shift, and go to state 38
    OPEN_BRACKET   shift, and go to state 39
    NOT            shift, and go to state 41

    NUMBER    [reduce using rule 35 (arithmetic_expr)]
    $default  reduce using rule 35 (arithmetic_expr)

    expr             go to state 141
    relation_expr    go to state 43
    logical_expr     go to state 44
    arithmetic_expr  go to state 45


state 138

   47 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr stmt . stmt next
   48    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr stmt . stmt stmt next

    error   shift, and go to state 1
    NUMBER  shift, and go to state 2

    stmt          go to state 142
    data          go to state 5
    for           go to state 6
    if            go to state 7
    def_fn        go to state 8
    input         go to state 9
    end           go to state 10
    dim           go to state 11
    goto          go to state 12
    gosub         go to state 13
    return        go to state 14
    stop          go to state 15
    variable_def  go to state 16
    assignment    go to state 17
    print         go to state 18
    comment       go to state 19


state 139

   46 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr next .

    $default  reduce using rule 46 (for)


state 140

   52 next: NUMBER NEXT . VARIABLE_NAME

    VARIABLE_NAME  shift, and go to state 143


state 141

   25 relation_expr: expr . LESS expr
   26              | expr . BIGGER expr
   27              | expr . LESSEQ expr
   28              | expr . BIGEQ expr
   29              | expr . EQUALS expr
   30              | expr . NOTEQUALS expr
   31 logical_expr: expr . AND expr
   32             | expr . OR expr
   34             | expr . XOR expr
   36 arithmetic_expr: expr . PLUS expr
   37                | expr . MINUS expr
   38                | expr . MULTIPLY expr
   39                | expr . DIVIDE expr
   40                | expr . POWER expr
   49 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr . stmt next
   50    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr . stmt stmt next
   51    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr . stmt stmt stmt next

    error      shift, and go to state 1
    EQUALS     shift, and go to state 67
    NUMBER     shift, and go to state 2
    PLUS       shift, and go to state 68
    MINUS      shift, and go to state 69
    DIVIDE     shift, and go to state 70
    MULTIPLY   shift, and go to state 71
    LESS       shift, and go to state 72
    BIGGER     shift, and go to state 73
    LESSEQ     shift, and go to state 74
    BIGEQ      shift, and go to state 75
    AND        shift, and go to state 76
    OR         shift, and go to state 77
    NOTEQUALS  shift, and go to state 80
    XOR        shift, and go to state 81
    POWER      shift, and go to state 82

    stmt          go to state 144
    data          go to state 5
    for           go to state 6
    if            go to state 7
    def_fn        go to state 8
    input         go to state 9
    end           go to state 10
    dim           go to state 11
    goto          go to state 12
    gosub         go to state 13
    return        go to state 14
    stop          go to state 15
    variable_def  go to state 16
    assignment    go to state 17
    print         go to state 18
    comment       go to state 19


state 142

   47 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt . next
   48    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt . stmt next

    error   shift, and go to state 1
    NUMBER  shift, and go to state 136

    stmt          go to state 145
    data          go to state 5
    for           go to state 6
    next          go to state 146
    if            go to state 7
    def_fn        go to state 8
    input         go to state 9
    end           go to state 10
    dim           go to state 11
    goto          go to state 12
    gosub         go to state 13
    return        go to state 14
    stop          go to state 15
    variable_def  go to state 16
    assignment    go to state 17
    print         go to state 18
    comment       go to state 19


state 143

   52 next: NUMBER NEXT VARIABLE_NAME .

    $default  reduce using rule 52 (next)


state 144

   49 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt . next
   50    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt . stmt next
   51    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt . stmt stmt next

    error   shift, and go to state 1
    NUMBER  shift, and go to state 136

    stmt          go to state 147
    data          go to state 5
    for           go to state 6
    next          go to state 148
    if            go to state 7
    def_fn        go to state 8
    input         go to state 9
    end           go to state 10
    dim           go to state 11
    goto          go to state 12
    gosub         go to state 13
    return        go to state 14
    stop          go to state 15
    variable_def  go to state 16
    assignment    go to state 17
    print         go to state 18
    comment       go to state 19


state 145

   48 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt stmt . next

    NUMBER  shift, and go to state 149

    next  go to state 150


state 146

   47 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt next .

    $default  reduce using rule 47 (for)


state 147

   50 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt . next
   51    | NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt . stmt next

    error   shift, and go to state 1
    NUMBER  shift, and go to state 136

    stmt          go to state 151
    data          go to state 5
    for           go to state 6
    next          go to state 152
    if            go to state 7
    def_fn        go to state 8
    input         go to state 9
    end           go to state 10
    dim           go to state 11
    goto          go to state 12
    gosub         go to state 13
    return        go to state 14
    stop          go to state 15
    variable_def  go to state 16
    assignment    go to state 17
    print         go to state 18
    comment       go to state 19


state 148

   49 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt next .

    $default  reduce using rule 49 (for)


state 149

   52 next: NUMBER . NEXT VARIABLE_NAME

    NEXT  shift, and go to state 140


state 150

   48 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr stmt stmt stmt next .

    $default  reduce using rule 48 (for)


state 151

   51 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt stmt . next

    NUMBER  shift, and go to state 149

    next  go to state 153


state 152

   50 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt next .

    $default  reduce using rule 50 (for)


state 153

   51 for: NUMBER FOR VARIABLE_NAME EQUALS expr TO expr STEP expr stmt stmt stmt next .

    $default  reduce using rule 51 (for)
